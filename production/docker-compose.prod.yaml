version: '3'

services:
  backend:
    container_name: burger-star-backend
    build: ../backend
    restart: always
    command: gunicorn star_burger.wsgi:application --bind 0.0.0.0:8000
    expose:
      - 8000
    volumes:
      - static_volume:/home/burger/web/staticfiles
      - media_volume:/home/burger/web/media
    env_file:
      - ./.env.prod
    depends_on:
      - db

  frontend:
    container_name: burger-star-frontend
    build: ../frontend

  db:
    container_name: burger-star-postgres
    image: postgres:14-alpine
    restart: always
    ports:
      - 5432:5432
    volumes:
      - postgres_volume:/var/lib/postgresql/data/
    env_file:
      - ./.env.prod

  nginx:
    container_name: burger-star-nginx
    image: nginx:1.21-alpine
    restart: always
    volumes:
      - static_volume:/home/burger/web/staticfiles
      - media_volume:/home/burger/web/media
      - ./data/nginx/conf.d:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    # reload nginx to obtain updated SSL certs -- every 6h
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - 80:80
      - 443:443
    depends_on:
      - backend

  certbot:
    container_name: burger-star-certbot
    image: certbot/certbot
    restart: always
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    # renew SSL certs if possible -- every 12h
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_volume:
  static_volume:
  media_volume:
